import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { MemoryRouter } from 'react-router'
import { IntlProvider } from 'react-intl'
import { vi } from 'vitest'
import LocaleDropdown from '../LocaleDropdown'
import { useLocaleStore } from '../../../stores'
import en from '../../../locales/en.json'

// Mock the flag images
vi.mock('../taiwan.png', () => ({ default: 'taiwanese-flag-mock.png' }))
vi.mock('../en.png', () => ({ default: 'english-flag-mock.png' }))

// Mock react-router hooks using importOriginal helper as suggested by Vitest
const mockNavigate = vi.fn()
vi.mock('react-router', async (importOriginal) => {
  const actual = await importOriginal()
  return {
    ...actual,
    useNavigate: () => mockNavigate,
    useLocation: vi.fn().mockReturnValue({ 
      pathname: '/', 
      search: '', 
      hash: '',
      state: null,
      key: 'default'
    })
  }
})

const createWrapper = (initialRoute = '/', locale = 'en') => {
  return ({ children }) => (
    <MemoryRouter initialEntries={[initialRoute]}>
      <IntlProvider locale={locale} messages={en}>
        {children}
      </IntlProvider>
    </MemoryRouter>
  )
}

describe('LocaleDropdown', () => {
  const originalAddEventListener = document.addEventListener
  const originalRemoveEventListener = document.removeEventListener

  beforeEach(async () => {
    vi.clearAllMocks()
    // Reset locale store
    useLocaleStore.setState({ locale: 'en' })
    
    // Setup router mocks - useLocation mock needs to return a default location
    const { useLocation } = await import('react-router')
    useLocation.mockReturnValue({ pathname: '/' })
    
    // Mock event listeners
    document.addEventListener = vi.fn()
    document.removeEventListener = vi.fn()
  })

  afterEach(() => {
    document.addEventListener = originalAddEventListener
    document.removeEventListener = originalRemoveEventListener
  })

  describe('Basic rendering', () => {
    it('renders dropdown button with current locale', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Should show English flag and label by default
      expect(screen.getByRole('button')).toBeInTheDocument()
      expect(screen.getByText('EN')).toBeInTheDocument()
      expect(screen.getByAltText('EN')).toHaveAttribute('src', 'english-flag-mock.png')
    })

    it('renders with Chinese locale when store is set to zh-TW', () => {
      useLocaleStore.setState({ locale: 'zh-TW' })
      
      const Wrapper = createWrapper('/', 'zh-TW')
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      expect(screen.getByText('繁中')).toBeInTheDocument()
      expect(screen.getByAltText('繁中')).toHaveAttribute('src', 'taiwanese-flag-mock.png')
    })

    it('renders dropdown arrow icon', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      const svgElement = screen.getByRole('button').querySelector('svg')
      expect(svgElement).toBeInTheDocument()
      expect(svgElement).toHaveAttribute('aria-hidden', 'true')
    })
  })

  describe('Dropdown interaction', () => {
    it('shows dropdown options when button is clicked', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Initially, dropdown options should not be visible (only button content)
      expect(screen.queryByRole('button', { name: /繁中/ })).not.toBeInTheDocument()

      // Click to open dropdown
      fireEvent.click(screen.getByRole('button'))

      // Both locale options should now be visible in the dropdown
      const allButtons = screen.getAllByRole('button')
      expect(allButtons).toHaveLength(3) // Main button + 2 dropdown options
      expect(screen.getAllByText('繁中')).toHaveLength(1) // Chinese option
      expect(screen.getAllByText('EN')).toHaveLength(2) // Button + English option
    })

    it('hides dropdown options when button is clicked twice', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      const button = screen.getByRole('button')
      
      // Open dropdown
      fireEvent.click(button)
      expect(screen.getAllByText('繁中')).toHaveLength(1)
      
      // Close dropdown
      fireEvent.click(button)
      expect(screen.queryByText('繁中')).not.toBeInTheDocument()
    })

    it('closes dropdown when clicking outside', async () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown
      fireEvent.click(screen.getByRole('button'))
      expect(screen.getAllByText('繁中')).toHaveLength(1)

      // Simulate clicking outside by calling the mousedown handler
      const mousedownHandler = document.addEventListener.mock.calls.find(
        call => call[0] === 'mousedown'
      )?.[1]

      if (mousedownHandler) {
        mousedownHandler({ target: document.body })
      }

      await waitFor(() => {
        expect(screen.queryByText('繁中')).not.toBeInTheDocument()
      })
    })
  })

  describe('Language selection', () => {
    it('changes locale when option is selected', async () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown and select Chinese
      fireEvent.click(screen.getByRole('button'))
      
      const chineseOptions = screen.getAllByText('繁中')
      fireEvent.click(chineseOptions[0])

      await waitFor(() => {
        expect(useLocaleStore.getState().locale).toBe('zh-TW')
      })
    })

    it('closes dropdown after selecting an option', async () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown
      fireEvent.click(screen.getByRole('button'))
      expect(screen.getAllByText('繁中')).toHaveLength(1)
      
      // Select option (this triggers locale change which updates the button)
      const chineseOptions = screen.getAllByText('繁中')
      fireEvent.click(chineseOptions[0])

      await waitFor(() => {
        // After clicking, the dropdown should close but the button now shows Chinese
        // So we need to check there's only one '繁中' (the button, not the dropdown option)
        const allChineseText = screen.getAllByText('繁中')
        expect(allChineseText).toHaveLength(1) // Only in button, not in dropdown
      })
    })

    it('updates button display after locale change', async () => {
      const Wrapper = createWrapper()
      
      const { rerender } = render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Initially shows English
      expect(screen.getByText('EN')).toBeInTheDocument()

      // Change locale to Chinese
      useLocaleStore.setState({ locale: 'zh-TW' })
      
      // Rerender to reflect store change
      rerender(
        <IntlProvider locale="zh-TW" messages={en}>
          <LocaleDropdown />
        </IntlProvider>
      )

      expect(screen.getByText('繁中')).toBeInTheDocument()
      expect(screen.queryByText('EN')).not.toBeInTheDocument()
    })
  })

  describe('Navigation integration', () => {
    it('navigates to home when on single-post page and locale changes', async () => {
      // Setup location mock for single-post page
      const { useLocation } = await import('react-router')
      useLocation.mockReturnValue({ pathname: '/single-post/123' })

      const Wrapper = createWrapper('/single-post/123')
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown and select Chinese
      fireEvent.click(screen.getByRole('button'))
      
      const chineseOptions = screen.getAllByText('繁中')
      fireEvent.click(chineseOptions[0])

      await waitFor(() => {
        expect(mockNavigate).toHaveBeenCalledWith('/')
      })
    })

    it('does not navigate when not on single-post page', async () => {
      // Setup location mock for home page (default)
      const { useLocation } = await import('react-router')
      useLocation.mockReturnValue({ pathname: '/' })
      
      const Wrapper = createWrapper('/')
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown and select Chinese
      fireEvent.click(screen.getByRole('button'))
      
      const chineseOptions = screen.getAllByText('繁中')
      fireEvent.click(chineseOptions[0])

      await waitFor(() => {
        expect(useLocaleStore.getState().locale).toBe('zh-TW')
      })

      // Should not have called navigate
      expect(mockNavigate).not.toHaveBeenCalled()
    })
  })

  describe('Event listener management', () => {
    it('adds mousedown event listener on mount', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      expect(document.addEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function))
    })

    it('removes mousedown event listener on unmount', () => {
      const Wrapper = createWrapper()
      
      const { unmount } = render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      unmount()

      expect(document.removeEventListener).toHaveBeenCalledWith('mousedown', expect.any(Function))
    })

    it('handles mousedown event on dropdown ref correctly', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown
      fireEvent.click(screen.getByRole('button'))
      
      // Get the mousedown handler
      const mousedownHandler = document.addEventListener.mock.calls.find(
        call => call[0] === 'mousedown'
      )?.[1]

      // Simulate clicking inside dropdown (should not close)
      const dropdownButton = screen.getByRole('button')
      if (mousedownHandler) {
        mousedownHandler({ target: dropdownButton })
      }

      // Dropdown should still be open
      expect(screen.getAllByText('繁中')).toHaveLength(1)
    })
  })

  describe('Accessibility', () => {
    it('provides proper button role', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      const button = screen.getByRole('button')
      expect(button).toHaveAttribute('type', 'button')
    })

    it('provides proper image alt texts', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown to see all images
      fireEvent.click(screen.getByRole('button'))

      const enImages = screen.getAllByAltText('EN')
      const zhImages = screen.getAllByAltText('繁中')
      
      expect(enImages).toHaveLength(2) // One in button, one in dropdown
      expect(zhImages).toHaveLength(1) // One in dropdown
    })

    it('provides proper focus management', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      const button = screen.getByRole('button')
      expect(button).toHaveClass('focus:outline-none')
      
      // Open dropdown
      fireEvent.click(button)
      
      const dropdownOptions = screen.getAllByRole('button')
      dropdownOptions.forEach(option => {
        expect(option).toHaveClass('focus:outline-none')
      })
    })
  })

  describe('Supported locales', () => {
    it('displays all available locale options', () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Open dropdown
      fireEvent.click(screen.getByRole('button'))

      // Should show both English and Chinese options
      expect(screen.getAllByText('EN')).toHaveLength(2) // Button + option
      expect(screen.getAllByText('繁中')).toHaveLength(1) // Option only
    })

    it('handles locale switching between supported languages', async () => {
      const Wrapper = createWrapper()
      
      render(
        <Wrapper>
          <LocaleDropdown />
        </Wrapper>
      )

      // Switch to Chinese
      fireEvent.click(screen.getByRole('button'))
      const chineseOptions = screen.getAllByText('繁中')
      fireEvent.click(chineseOptions[0])

      await waitFor(() => {
        expect(useLocaleStore.getState().locale).toBe('zh-TW')
      })

      // Switch back to English
      fireEvent.click(screen.getByRole('button'))
      const englishOptions = screen.getAllByText('EN')
      fireEvent.click(englishOptions[englishOptions.length - 1]) // Last one is the dropdown option

      await waitFor(() => {
        expect(useLocaleStore.getState().locale).toBe('en')
      })
    })
  })
})